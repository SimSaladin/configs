#!/usr/bin/bash --

# Wrapper around qutebrowser that makes sessions (-r, --restore SESSION) behave
# like they used to in dwb.
#
# We do so by filtering out the -r/--restore option passed to qutebrowser and
# using the argument to set up the following directory structure and symbolic
# links:
#
# $XDG_RUNTIME_DIR/qutebrowser/$session/cache   → $XDG_CACHE_HOME/qutebrowser/$session
# $XDG_RUNTIME_DIR/qutebrowser/$session/data    → $XDG_DATA_HOME/qutebrowser/$session
# $XDG_RUNTIME_DIR/qutebrowser/$session/config  → $XDG_CONFIG_HOME/qutebrowser
# $XDG_RUNTIME_DIR/qutebrowser/$session/runtime (no symlink, regular directory)
#
# We then specify $XDG_RUNTIME_DIR/qutebrowser/$session as a --basedir, and the
# files will end up in their intended locations (notice how the config directory
# is the same for all sessions, as there is no point in keeping it separate).
#
# DISCLAIMER: The author of this script manages all his configuration files
# manually, so this wrapper script has not been tested for the use case where
# qutebrowser itself writes to these files (and more importantly, if multiple
# such "sessions" simultaneously write to the same configuration file).
#
# YOU HAVE BEEN WARNED.
#
# Written by ayekat in an burst of nostalgy, on a mildly cold wednesday night in
# February 2017.

set -eu

# Constants:
FALSE=0
TRUE=1

# Set default values for the variables as defined in the XDG base directory spec
# (https://specifications.freedesktop.org/basedir-spec/latest/):
XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$UID}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}

# Translate options: remove occurrences of -r/--restore from the list of
# command line arguments and save the session name for later; ignore -R (TODO):
session='default'
basedir_specified=$FALSE
opts_read=0
while [ $opts_read -lt $# ]; do
	opt="$1" && shift
	case "$opt" in
		(--basedir|-T|--temp-basedir) basedir_specified=$TRUE ;;
		(-r|-[!-]*r|--restore) test $# -gt 0 && session="$1" && shift && continue ;;
		(-R) continue ;; # TODO
	esac
	set -- "$@" "$opt"
	opts_read=$((opts_read + 1))
done

# Set up session base directory, unless --basedir has been specified by the
# user:
if [ $basedir_specified -eq $FALSE ]; then
	basedir="$XDG_RUNTIME_DIR/qutebrowser/$session"
	set -- --qt-arg name "$session" --basedir "$basedir" "$@"
	mkdir -p \
                "$basedir/runtime" \
		"$XDG_CONFIG_HOME/qutebrowser" \
		"$XDG_CACHE_HOME/qutebrowser/$session" \
		"$XDG_DATA_HOME/qutebrowser/$session"
	ln -fsT "$XDG_CONFIG_HOME/qutebrowser"          "$basedir/config"
	ln -fsT "$XDG_CACHE_HOME/qutebrowser/$session"  "$basedir/cache"
	ln -fsT "$XDG_DATA_HOME/qutebrowser/$session"   "$basedir/data"
	ln -fsT ../blocked-hosts "$XDG_DATA_HOME/qutebrowser/$session/blocked-hosts"
	ln -fsT ../qtwebengine_dictionaries "$XDG_DATA_HOME/qutebrowser/$session/qtwebengine_dictionaries"
fi

# Search "real" qutebrowser executable:
spath="$(readlink -f "$0")"
IFS=:
for p in $PATH; do
	epath="$p"/qutebrowser
	if [ -x "$epath" ] && [ "$(readlink -f "$epath")" != "$spath" ]; then
		exec "$epath" "$@"
	fi
done

# ¯\_(ツ)_/¯
echo 'command not found: qutebrowser' >&2
exit 127
