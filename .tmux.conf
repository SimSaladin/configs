# ~/.tmux.conf
# <url:man:tmux.1>
#
# Notes                                                                  {{{1
#
# set-option [-gsw] option value
# set-option [-gsw] @user-option value
#       -s    server
#       -g    session defaults (global)
#       -gw   window defaults (global)
#             #S
#       -w    $W
# show-options -v @my-var
#
# display-message [-apv] [-c #C] [-t #P] [msg]
#        -p: print to stdout (default: statusline of #P/#C)
#        -v: verbose logging while parsing format
#        -a: list format variables and values
#
# confirm-before [-p pc] [-t #C] cmd
#
# command-prompt [-1i] [-I in[,...]] [-t #C] [-p pc[,...]] [template]
#       -1: read just one keypress
#       -i: execute prompt command every time input changes
#       -l: initial prompt values (%1 ... %9)
#       -p: a series of prompts to run for inputs %1..%9
#       executes command built from template by replacing every %1...%9 with
#       the prompt inputs and first %% with first prompt response:
#               "split-window 'exec vim '%%'"
#               -I "#W" "some-action -- '%%'"
#
# run-shell [-b] [-t #P] some-shell
#
# if-shell [-Fb] [-t #P] some-shell so-then [or-else]
#
# NOTE: bind sequences of characters consider (binds 'abc' to show-messages):
#       bind-key -Ttab2 c show-messages
#       bind-key -Ttab1 b switch-client -Ttab2
#       bind-key -Troot a switch-client -Ttab1
#
#}}}1

# Plugins TODO

# https://github.com/tmux-plugins
# https://github.com/tmux-plugins/tpm
# https://github.com/tmux-plugins/tmux-continuum
# https://github.com/tmux-plugins/tmux-resurrect
# https://github.com/powerline/powerline

# OPTIONS

# Server options (-s)                                                    {{{1

set -s exit-empty off

# Command aliases
# Slots 0..5 provided by default. NB, expand when parsed!

set -s command-alias[6] update-pwd='if-shell -F "~#(printenv HOME)" "attach-session -E -c \"#{?#{m:/*,#{@working-directory}},,#(printenv HOME)/}#{@working-directory}\""'

# Hooks

set-hook -g client-attached update-pwd

# Global (-g) session & window (-w) options                              {{{1

set -g  prefix  C-a
set -g  prefix2 None

set -g  default-terminal tmux-256color

# default-command [shell-cmd] If empty, default-shell is used instead. Launches login shell by default.
#set -g  default-command '${SHELL}'

set -g  remain-on-exit          off
set -g  history-limit           10000
set -gw alternate-screen        on      # allows smcup/rmcup (to restore window contents when interactive program exits)
set -gw wrap-search             off
set -g  set-titles              on
set -g  set-titles-string       '#T - tmux: #S#{?session_group, (#{session_group}),}: #W #{session_alerts}'
set -g  mouse                   off
set -g  escape-time             0
set -gw xterm-keys              on
set -gw mode-keys               vi      # (default mode-keys vi)
set -g  renumber-windows        on
set -gw aggressive-resize       on      # When on resize per-window (and not per session). See option window-size
set -gw window-size             smallest # smallest (default), largest or manual (see default-size)
set -gw allow-rename            on      # whether or not a program can set window name via termcap escape sequence
set -gw automatic-rename        on      # automatically rename windows
set -gw automatic-rename-format "#{?pane_in_mode,[tmux],#{pane_current_command}}#{?pane_dead,[dead],}"
set -g  display-panes-active-colour blue
set -g  display-panes-colour    brightred
set -g  message-style           fg=brightred,bg=black
set -gw mode-style              fg=black,bg=yellow
set -gw pane-border-style       fg=black
set -gw pane-active-border-style fg=brightgreen
set -gw clock-mode-colour       green

# status lines                                                           {{{2
set -g status                   on        # number of status lines [ off | on | 2 .. 5 ]
#set -g status-format[]
set -g status-interval          60        # interval at which to redraw status line formats
set -g status-justify           centre    # where to justify window list [ left | right | centre ]
set -g status-keys              vi
set -g status-position          bottom
set -g status-left              '#(printenv USER)@#H (#S) #(dirs +0)'
set -g status-right             '#{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,} [#{=45:pane_title}]'
set -g status-style             bg=black,fg=default
set -g status-left-style        none
set -g status-right-style       none
set -g status-left-length       0
set -g status-right-length      0

# "#[align=centre]#{P:#{?pane_active,#[reverse],}#{pane_index}[#{pane_width}x#{pane_height}]#[default] }"

# window-status
set -gw window-status-separator      ' '
set -gw window-status-format         "#I:#W#{?window_flags,#{window_flags}, }"
set -gw window-status-current-format "#I:#W#{?window_flags,#{window_flags}, }"
set -gw window-status-current-style  fg=brightred
set -gw window-status-activity-style fg=blue
set -gw window-status-last-style     fg=brightmagenta
set -gw window-status-bell-style     fg=blue
set -gw window-status-style          none

# Alerts                                                                 {{{2

# the *-action options determine which alerts to react to in relation to current window.
# tmux can manage three kinds of alerts: bell, activity and silence.
# The monitor-* window options determine which alerts tmux monitors per window.
set -g visual-activity   off # on (message), off (bell), both (message + bell)
set -g visual-silence    off
set -g visual-bell       off
set -g activity-action   other # any, none, current or other
set -g silence-action    other
set -g bell-action       any
set -gw monitor-activity off # on/off
set -gw monitor-bell     on  # on/off
set -gw monitor-silence  0   # seconds, determines max silence interval. 0 disables

# }}}1

# BINDINDGS

unbind-key -a
unbind-key -T copy-mode-vi -a

# bindings: root                                                         {{{1
bind-key -Troot C-PgUp copy-mode -eu
bind-key -Troot M-PgUp copy-mode -eu

# bindings: prefix                                                       {{{1
bind-key -r C-a send-prefix
bind-key    :   command-prompt
bind-key    r   source-file ~/.tmux.conf \; display-message "Reloaded configuration"
bind-key    ?   list-keys
bind-key    '~' show-messages
bind-key    t   clock-mode # turn the active pane into a clock
bind-key    v   copy-mode
bind-key PgUp   copy-mode -u
bind-key    ]   choose-buffer -Z

# client                                                                 {{{2
bind-key    d   detach-client
bind-key    C-z suspend-client
bind-key    Y   switch-client -l  # last-client
bind-key    (   switch-client -p
bind-key    )   switch-client -n
bind-key    D   choose-client -Z

# create W | P                                                           {{{2
bind-key    c   new-window
bind-key    C   new-window -a
bind-key    '"' split-window -v -p 25
bind-key    "'" split-window -v -p 25 -b
bind-key    |   split-window -h -p 35
bind-key   "\\" split-window -h -p 35 -b

# select                                                                 {{{2
bind-key    w   choose-tree -GswZ  # choose in all sessions
bind-key    C-w run-shell "tmux choose-tree -Nw -f \"##{==:##{session_id},#{q:session_id}}\"" # choose a window/pane from current session
bind-key    y   last-window
bind-key    a   last-window
bind-key    A   next-window -a  # window with alert
#bind-key    "'" command-prompt -p window: "select-window -t \":%%%\"" # choose window by index
bind-key    /   command-prompt -p find: "find-window -Z -- \"%%%\""  # by name
bind-key    C-y last-pane
bind-key -r C-n select-pane -t :.+ # next pane
bind-key -r C-p select-pane -t :.- # previous pane
bind-key -r h   select-pane -L
bind-key -r j   select-pane -D
bind-key -r k   select-pane -U
bind-key -r l   select-pane -R
bind-key -r n   select-window -t :+
bind-key -r p   select-window -t :-
bind-key    0   select-window -t :=0
bind-key    1   select-window -t :=1
bind-key    2   select-window -t :=2
bind-key    3   select-window -t :=3
bind-key    4   select-window -t :=4
bind-key    5   select-window -t :=5
bind-key    6   select-window -t :=6
bind-key    7   select-window -t :=7
bind-key    8   select-window -t :=8
bind-key    9   select-window -t :=9

# rotate/swap/rename S | W                                               {{{2
bind-key    o   rotate-window
bind-key    {   swap-pane -U
bind-key    }   swap-pane -D
bind-key -r N   swap-window -t :+
bind-key -r P   swap-window -t :-
bind-key    .   command-prompt -p "swap (#I:#W):" "swap-window -t \"%%%\""
bind-key    ,   command-prompt -p "rename #I:#W:" "rename-window -- \"%%%\""
bind-key    '$' command-prompt -p "rename (#S):" "rename-session -- \"%%%\""

# kill S | W | P                                                         {{{2
bind-key    x   confirm-before -p "kill pane #P? (y/n)" kill-pane
bind-key    X   confirm-before -p "kill window #W? (y/n)" kill-window
bind-key    C-x confirm-before -p "kill session #S? (y/n)" kill-session

# change layout                                                          {{{2
bind-key -r Space next-layout
bind-key    =   select-layout -E  # even all panes

# resize P                                                               {{{2
bind-key    z   resize-pane -Z     # toggle zoom
bind-key -r C-h resize-pane -L
bind-key -r C-j resize-pane -D
bind-key -r C-k resize-pane -U
bind-key -r C-l resize-pane -R
bind-key -r H   resize-pane -L 5
bind-key -r J   resize-pane -D 5
bind-key -r K   resize-pane -U 5
bind-key -r L   resize-pane -R 5

# mark/break/join P                                                      {{{2
bind-key    m   select-pane -m \; display-message "Marked pane #T #F"
bind-key    M   select-pane -M \; display-message "Unmarked pane"
bind-key    !   break-pane
bind-key Enter   join-pane -v
bind-key S-Enter join-pane -h

# bindings: copy-mode                                                    {{{1
# select                                                                 {{{2
# v  V  ^V      begin char-, line- or block-wise select
# <Esc> ^C      abort copy-mode (no buffer or clip created)
# q             clear current selection if any; if none abort like above
# y             copy current selection to buffer and clipboard & exit copy-mode
# ^Y            like <y> but doesn't exist copy-mode
# NOTE: #{selection_present} if there's selected (highlighted) text currently
# NOTE: "choose-buffer -Z" to choose from tmux buffers
bind-key -T copy-mode-vi v      send-keys -X begin-selection
bind-key -T copy-mode-vi V      send-keys -X select-line
bind-key -T copy-mode-vi C-v    send-keys -X begin-selection \; send-keys -X rectangle-toggle
bind-key -T copy-mode-vi Escape send-keys -X cancel \; display-message "Exited copy-mode"
bind-key -T copy-mode-vi C-c    send-keys -X cancel \; display-message "Exited copy-mode"
bind-key -T copy-mode-vi q      if-shell -F "#{selection_present}" "send-keys -X clear-selection" "send-keys -X cancel"
bind-key -T copy-mode-vi y      send-keys -X copy-pipe-and-cancel "xclip -i"                      \; display-message "copied selection to buffer and clipboard"
bind-key -T copy-mode-vi C-y    send-keys -X copy-pipe "xclip -i" \; send-keys -X clear-selection \; display-message "copied selection to buffer and clipboard"
#bind-key -T copy-mode-vi a      send-keys -X append-selection-and-cancel
#bind-key -T copy-mode-vi c      send-keys -X copy-selection-and-cancel
#bind-key -T copy-mode-vi Y      send-keys -X copy-selection
#bind-key -T copy-mode-vi A      send-keys -X append-selection

# move                                                                   {{{2
bind-key -T copy-mode-vi o      send-keys -X other-end          # other end of current selection
bind-key -T copy-mode-vi h      send-keys -X cursor-left
bind-key -T copy-mode-vi j      send-keys -X cursor-down
bind-key -T copy-mode-vi k      send-keys -X cursor-up
bind-key -T copy-mode-vi l      send-keys -X cursor-right
bind-key -T copy-mode-vi w      send-keys -X next-word
bind-key -T copy-mode-vi W      send-keys -X next-space
bind-key -T copy-mode-vi e      send-keys -X next-word-end
bind-key -T copy-mode-vi E      send-keys -X next-space-end
bind-key -T copy-mode-vi b      send-keys -X previous-word
bind-key -T copy-mode-vi B      send-keys -X previous-space
bind-key -T copy-mode-vi {      send-keys -X previous-paragraph
bind-key -T copy-mode-vi }      send-keys -X next-paragraph
bind-key -T copy-mode-vi K      send-keys -X scroll-up
bind-key -T copy-mode-vi J      send-keys -X scroll-down
bind-key -T copy-mode-vi g      send-keys -X history-top
bind-key -T copy-mode-vi G      send-keys -X history-bottom
bind-key -T copy-mode-vi C-u    send-keys -X halfpage-up
bind-key -T copy-mode-vi C-d    send-keys -X halfpage-down
bind-key -T copy-mode-vi ^      send-keys -X back-to-indentation
bind-key -T copy-mode-vi 0      send-keys -X start-of-line
bind-key -T copy-mode-vi '$'    send-keys -X end-of-line
bind-key -T copy-mode-vi H      send-keys -X top-line
bind-key -T copy-mode-vi L      send-keys -X bottom-line
bind-key -T copy-mode-vi M      send-keys -X middle-line
bind-key -T copy-mode-vi :      command-prompt -p goto: "send -X goto-line \"%%%\""

bind-key -T copy-mode-vi Up     send-keys -X cursor-up
bind-key -T copy-mode-vi Down   send-keys -X cursor-down
bind-key -T copy-mode-vi Left   send-keys -X cursor-left
bind-key -T copy-mode-vi Right  send-keys -X cursor-right
bind-key -T copy-mode-vi PgUp   send-keys -X page-up
bind-key -T copy-mode-vi PgDn   send-keys -X page-down

# search                                                                 {{{2
# f/F cursor over target
# t/T cursor next to target
bind-key -T copy-mode-vi /      command-prompt -p / "send -X search-forward \"%%%\""
bind-key -T copy-mode-vi ?      command-prompt -p ? "send -X search-backward \"%%%\""
bind-key -T copy-mode-vi f      command-prompt -1 -p "jump forward" "send -X jump-forward \"%%%\""
bind-key -T copy-mode-vi F      command-prompt -1 -p "jump backward" "send -X jump-backward \"%%%\""
bind-key -T copy-mode-vi t      command-prompt -1 -p "jump to forward" "send -X jump-to-forward \"%%%\""
bind-key -T copy-mode-vi T      command-prompt -1 -p "jump to backward" "send -X jump-to-backward \"%%%\""
bind-key -T copy-mode-vi n      send-keys -X search-again
bind-key -T copy-mode-vi N      send-keys -X search-reverse
bind-key -T copy-mode-vi \;     send-keys -X jump-again
bind-key -T copy-mode-vi ,      send-keys -X jump-reverse

# repeat                                                                 {{{2
bind-key -T copy-mode-vi 1      command-prompt -N -I 1 -p repeat: "send -N \"%%%\""
bind-key -T copy-mode-vi 2      command-prompt -N -I 2 -p repeat: "send -N \"%%%\""
bind-key -T copy-mode-vi 3      command-prompt -N -I 3 -p repeat: "send -N \"%%%\""
bind-key -T copy-mode-vi 4      command-prompt -N -I 4 -p repeat: "send -N \"%%%\""
bind-key -T copy-mode-vi 5      command-prompt -N -I 5 -p repeat: "send -N \"%%%\""
bind-key -T copy-mode-vi 6      command-prompt -N -I 6 -p repeat: "send -N \"%%%\""
bind-key -T copy-mode-vi 7      command-prompt -N -I 7 -p repeat: "send -N \"%%%\""
bind-key -T copy-mode-vi 8      command-prompt -N -I 8 -p repeat: "send -N \"%%%\""
bind-key -T copy-mode-vi 9      command-prompt -N -I 9 -p repeat: "send -N \"%%%\""

# }}}1

# tpm - tmux plugin manager

#set-environment -g TMUX_PLUGIN_MANAGER_PATH

set -g @plugin 'tmux-plugins/tpm'

run-shell -b '~/.config/tmux/plugins/tpm/tpm'
