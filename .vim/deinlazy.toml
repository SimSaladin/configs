# File:	~/.vim/deinlazy.toml          vim:set vsts=2,12:
# Author: Samuli Thomasson
# Description: Lazily loaded VIM plugins.
# Docs: <url:vimhelp:dein.txt>

# YankRing                                                               {{{1
# URL <url:vimhelp:yankring>
[[plugins]]
repo = 'RobertAudi/YankRing.vim'  # XXX: 'vim-scripts/YankRing.vim' need v20.0
rev = 'pr/v20.0'
augroup = 'YankRing'
on_event = 'VimEnter'

# WindowSwap                                                             {{{1
#
# Shuffling windows
# Help <url:vimhelp:windowswap>
#
# Note: the global plugin does nothing interesting in this one. We define our
# own mappings.
#
# EasyWindowSwap()                If mark not set: Mark current. If mark is set,
#                                 …swap current with marked and clear mark.
# MarkWindowSwap()                Mark current window.
# DoWindowSwap()                  Swap marked window with current.
# IsWindowMarked(tabnum, winnum)  True if window at <tab number>, <window number> is marked.
# IsCurrentWindowMarked()         True if current window is marked.
#
[[plugins]]
repo = 'wesQ3/vim-windowswap'
on_event = 'WinNew' # Is not triggered for initial window

# origami                                                                {{{1
#
# Some fold marker macros.
#
# Note: global plugin is uninteresting, not loaded.
#
# URL:  <url:https://github.com/kshenoy/vim-origami>
# Help: <url:vimhelp:origami-contents>
#
# Default mappings (normal mode):
#  ZD   origami#DeleteFoldmarker()
#  Zc   origami#InsertFoldmarker("close", "nocomment", v:count)
#  ZC   origami#InsertFoldmarker("close", "comment"  , v:count)
#  Zf   origami#InsertFoldmarker("open" , "nocomment", v:count)
#  ZF   origami#InsertFoldmarker("open" , "comment"  , v:count)
#  ZA   origami#AlignFoldmarkers()
#  Za   origami#AlignFoldmarkers(v:count)
#
[[plugins]]
repo = 'kshenoy/vim-origami'
on_event = 'VimEnter'
# speeddating                                                            {{{1
#
# manipulate timestamps fast <url:vimhelp:speeddating>
#
[[plugins]]
repo = 'tpope/vim-speeddating'
on_map = {n='<Plug>SpeedDating'}

# emmet                                                                  {{{1
#
# high-speed HTML, XML, XSL etc. editing.
# write html abbrev: div#page>div.logo+ul>li*5>a --> <div id=page>...
#
# Help <url:vimhelp:emmet.txt>
#
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'haml', 'xsl', 'css']

# Syntastic                                                              {{{1
#
# URL <url:vimhelp:syntastic.txt>
#
# :SyntaxticInfo show what is currently enabled
#
[[plugins]]
repo = 'scrooloose/syntastic'
augroup = 'syntastic'
on_event = 'BufWrite'

# better-whitespace                                                      {{{1
#
# URL <url:vimhelp:better-whitespace.txt>
#
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_event = 'BufReadPre'

# airline                                                                {{{1
#
# statusline
#
[[plugins]] # Note: despite its name airline loads a lot of stuff (extensions)
repo = 'vim-airline/vim-airline'
augroup = 'airline'
on_event = ['VimEnter', 'WinEnter']
on_if = '&g:laststatus > 0 && empty(&g:statusline) && (winnr("$") + &g:laststatus > 2)'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
on_source = 'airline'

# Calendar                                                               {{{1
#
# Calendar viewer and selector inside vim
#
# URL <lnk:vimhelp:calendar>
#
[[plugins]]
repo = 'mattn/calendar-vim'
on_source = 'orgmode'

# Defx                                                                   {{{1
#
# :Defx
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_source = '''
  call defx#custom#column('mark', {
          \ 'readonly_icon': '✗',
          \ 'selected_icon': '✓',
          \ })
  call defx#custom#column('icon', {
          \ 'directory_icon': '▸',
          \ 'opened_icon': '▾',
          \ 'root_icon': ' ',
          \ })
'''

# Goyo                                                                   {{{1
#
# Focusing thing
#
# :Goyo
#
[[plugins]]
repo = 'junegunn/goyo.vim'
on_cmd = 'Goyo'

# Tagbar                                                                 {{{1
#
# display tags on a sidebar
#
# URL <url:vimhelp:tagbar>
# :TagbarToggle
#
[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = 'TagbarToggle'

# UltiSnips                                                              {{{1
#
# python-powered snippets
#
# URL <url:vimhelp:UltiSnips>
#
[[plugins]]
repo = 'SirVer/ultisnips'
on_event = ['BufNewFile', 'InsertEnter']

# NrrwRgn                                                                {{{1
#
# narrow region thing
#
# URL <url:vimhelp:NrrwRgn.txt>
# Commands: :NR
#
[[plugins]]
repo = 'chrisbra/NrrwRgn'
on_cmd = ['NR','NW','NUD','NRP']
# }}}1

# LanguageClient                                                         {{{1
#
# Source plugin manually!
#
# URL <url:vimhelp:LanguageClient.txt>
#
# NOTE: LanguageClient supposedly integrates with deodeplete on its own(?)
# NOTE: Requires haskell-ide-engine ('hie-*') binary
#
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
name = 'LanguageClient'
build = 'bash install.sh'
[plugins.ftplugin]
'_' = '''
  hi link ALEError Error
  hi      Warning term=underline cterm=underline ctermfg=Yellow gui=undercurl guisp=Gold
  hi link ALEWarning Warning
  hi link ALEInfo SpellCap

  nnoremap <buffer> <localleader>lc :call LanguageClient_contextMenu()<CR>
  nnoremap <buffer> <localleader>lk :call LanguageClient#textDocument_hover()<CR>
  nnoremap <buffer> <localleader>lg :call LanguageClient#textDocument_definition()<CR>
  nnoremap <buffer> <localleader>lr :call LanguageClient#textDocument_rename()<CR>
  nnoremap <buffer> <localleader>lf :call LanguageClient#textDocument_formatting()<CR>
  nnoremap <buffer> <localleader>lb :call LanguageClient#textDocument_references()<CR>
  nnoremap <buffer> <localleader>la :call LanguageClient#textDocument_codeAction()<CR>
  nnoremap <buffer> <localleader>ls :call LanguageClient#textDocument_documentSymbol()<CR>
'''
# }}}1

# Deoplete                                                               {{{1
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype','yarp']
on_event = 'InsertEnter'
hook_source = '''
  " Configure sources. Higher rank = higher priority.
  call deoplete#custom#source('ultisnips',     'rank',1000) " [US]
  call deoplete#custom#source('LanguageClient','rank',500)
  call deoplete#custom#source('tabnine',       'rank',500) " [TN]
  call deoplete#custom#source('vim',           'rank',700) " [vim]

  " call deoplete#custom#option('sources',{'_':['LanguageClient','ultisnips','buffer','tag','tabnine']})

  " Set options
  call deoplete#custom#option('max_list', 50)
  call deoplete#custom#option('num_processes', 2)
  call deoplete#custom#option('candidate_marks', ['0', '1', '2', '3', '4'])
  call deoplete#custom#option('refresh_always', v:true)
  " prev_completion_mode XXX

  inoremap <expr> <C-g>0 pumvisible() ? deoplete#insert_candidate(0) : '0'
  inoremap <expr> <C-g>1 pumvisible() ? deoplete#insert_candidate(1) : '1'
  inoremap <expr> <C-g>2 pumvisible() ? deoplete#insert_candidate(2) : '2'
  inoremap <expr> <C-g>3 pumvisible() ? deoplete#insert_candidate(3) : '3'
  inoremap <expr> <C-g>4 pumvisible() ? deoplete#insert_candidate(4) : '4'

  call deoplete#enable()
'''
# tabnine (deoplete)                                                     {{{1
#
# any language autocomplete
#
[[plugins]]
repo = 'tbodt/deoplete-tabnine'
on_source = 'deoplete'
build = './install.sh'

# echodoc (deoplete)                                                     {{{1
#
# display function sigs from completions (deoplete) <url:vimhelp:echodoc>
#
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

# neco (deoplete:ft=vim)                                                 {{{1
[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'deoplete'
on_ft = 'vim'
# }}}1

# Denite                                                                 {{{1
# + junkfile
# + neomru
# + fruzzy
#
# URL <url:vimhelp:denite.txt>
#
# :Denite
#
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'yarp'
on_cmd = 'Denite'
hook_post_source = '''
  call denite#custom#option('_', 'statusline', v:false)
'''

# junkfile (denite)                                                      {{{1
[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite'

# neomru (denite)                                                        {{{1
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite'

# TODO configure                                                         {{{1
[[plugins]]
repo = 'raghur/fruzzy'
on_source = 'denite'
hook_post_update = 'call fruzzy#install()'


# pandoc (ft=pandoc)                                                     {{{1
# pandoc-syntax
# pandoc-after XXX conflicts everywhere
#
[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
on_event = ['VimEnter']

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'
on_source = 'pandoc'

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-after'
on_source = 'pandoc'

# Filetype                                                               {{{1

# nix (ft=nix)                                                           {{{2
[[plugins]]
repo = 'LnL7/vim-nix'

# ghcid (ft=haskell)                                                     {{{1
[[plugins]]
repo = 'alx741/vim-ghcid' # https://github.com/alx741/vim-ghcid
on_ft = 'haskell'

# haskellFold (ft=haskell)                                               {{{1
[[plugins]]
repo = 'Twinside/vim-haskellFold'
name = 'haskell-fold'
#on_ft = 'haskell'

# Orgmode (ft=org)                                                       {{{1
# <url:vimhelp:orgguide.txt>
[[plugins]]
repo = 'jceb/vim-orgmode'
depends = ['speeddating', 'repeat', 'utl', 'calendar']
on_ft = 'org'
