servers = (
  {
    address = "irc.inet.fi";
    chatnet = "IRCnet";
    port = "6667";
    autoconnect = "yes";
  },
  {
    address = "irc.paivola.fi";
    chatnet = "PVLNet";
    port = "6667";
    autoconnect = "yes";
  },
  {
    address = "irc.freenode.net";
    chatnet = "FreeNode";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  },
  { address = "irc.efnet.net"; chatnet = "EFNet"; port = "6667"; },
  { 
    address = "irc.undernet.org";
    chatnet = "Undernet";
    port = "6667";
  },
  { address = "irc.dal.net"; chatnet = "DALnet"; port = "6667"; },
  {
    address = "mediatraffic.fi.quakenet.org.";
    chatnet = "QuakeNet";
    port = "6667";
  },
  { address = "silc.silcnet.org"; chatnet = "SILC"; port = "706"; },
  {
    address = "ssdesk.paivola.fi";
    chatnet = "bitlbee";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  },
  {
    address = "irc-test.paivola.fi";
    chatnet = "PVLnet-test";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
  }
);

chatnets = {
  IRCnet = {
    type = "IRC";
    max_kicks = "6";
    max_msgs = "5";
    max_whois = "4";
    max_query_chans = "5";
  };
  PVLnet = {
    type = "IRC";
    max_query_chans = "5";
    max_kicks = "6";
    max_msgs = "5";
    max_whois = "4";
  };
  FreeNode = { type = "IRC"; nick = "`bps"; };
  EFNet = { 
    type = "IRC";
    max_kicks = "4";
    max_msgs = "3";
    max_whois = "1";
  };
  Undernet = {
    type = "IRC";
    max_kicks = "1";
    max_msgs = "3";
    max_whois = "30";
  };
  DALnet = {
    type = "IRC";
    max_kicks = "4";
    max_msgs = "3";
    max_whois = "30";
  };
  QuakeNet = {
    type = "IRC";
    max_kicks = "1";
    max_msgs = "3";
    max_whois = "30";
  };
  SILC = { type = "SILC"; };
  bitlbee = { type = "IRC"; };
  "PVLnet-test" = { type = "IRC"; };
};

channels = (
  { name = "#admin"; chatnet = "PVLnet"; autojoin = "Yes"; },
  { name = "#paivola.admin"; chatnet = "PVLnet"; autojoin = "Yes"; },
  { name = "#*nix"; chatnet = "PVLnet"; autojoin = "Yes"; },
  { name = "#php"; chatnet = "PVLnet"; autojoin = "Yes"; },
  { name = "#haikukommuuniko"; chatnet = "PVLnet"; autojoin = "Yes"; },
  { name = "#bitcoin"; chatnet = "PVLnet"; autojoin = "Yes"; },
  { name = "#haiku"; chatnet = "PVLnet"; autojoin = "Yes"; },
  { name = "!kuvisanime"; chatnet = "IRCnet"; autojoin = "Yes"; },
  { name = "#haskell"; chatnet = "FreeNode"; autojoin = "Yes"; },
  { name = "#archlinux"; chatnet = "FreeNode"; autojoin = "Yes"; },
  { name = "#yesod"; chatnet = "FreeNode"; autojoin = "Yes"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi - Happy now?";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  UPTIME = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  dvorak = "bind -delete meta-q;bind -delete meta-w;bind -delete meta-e;bind -delete meta-r;bind -delete meta-t;bind -delete meta-y;bind -delete meta-u;bind -delete meta-i;bind -delete meta-o;bind -delete meta-p;bind -delete meta-f;bind meta-\\; change_window 11;bind meta-, change_window 12;bind meta-. change_window 13;bind meta-p change_window 14;bind meta-y change_window 15;bind meta-f change_window 16;bind meta-g change_window 17;bind meta-c change_window 18;bind meta-r change_window 19;bind meta-l change_window 20 ";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi - The best IRC client ever";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        usercount = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_1 = {
      items = {
        barstart = { priority = "100"; };
        awl_1 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  "fe-common/core" = {
    term_charset = "utf-8";
    theme = "lucid";
    bell_beeps = "yes";
    beep_msg_level = "MSGS DCC DCCMSGS HILIGHT";
    autolog = "yes";
    autolog_colors = "yes";
    hilight_act_color = "%Y";
  };
  core = {
    real_name = "Samuli Thomasson";
    user_name = "bps";
    nick = "bps";
  };
  "fe-text" = { actlist_sort = "refnum"; colors = "yes"; };
  "perl/core/scripts" = {
    awl_display_key = "$Q:$H$C$S";
    awl_display_key_active = "$Q:%b$H$C$S%n";
    awl_display_nokey_active = "";
    nicklist_width = "12";
    awl_block = "10";
    awl_sbar_maxlength = "yes";
    awl_maxlines = "5";
    trackbar_string = "-";
  };
};

ignores = (
  { level = "JOINS PARTS QUITS"; channels = ( "#archlinux" ); },
  {
    level = "ALL";
    pattern = ".*[Ss]+[Ii]+[Ee]+[Nn]+[Ii]+.*";
    regexp = "yes";
    channels = ( "#Sieni" );
  },
  {
    level = "ALL";
    pattern = ".*[Ss]+[Ii]+[Ee]+[Nn]+[Ii]+.*";
    regexp = "yes";
    channels = ( "#Sieni" );
  },
  { level = "JOINS PARTS QUITS"; channels = ( "#haskell" ); },
  { mask = "a"; level = "ALL"; },
  {
    level = "ALL";
    pattern = "[Mm]+[Uu]+[Ss]+[Hh]+[Rr]+[Oo][Oo]+[Mm]+";
    regexp = "yes";
  },
  {
    level = "ALL";
    pattern = "[Mm]+[Uu]+[Ss]+[Hh]+[Rr]+[Oo][Oo]+[Mm]+";
    regexp = "yes";
  },
  { level = "JOINS PARTS QUITS"; channels = ( "#yesod" ); }
);
keyboard = (
  { key = "meta-h"; id = "previous_window"; data = ""; },
  { key = "meta-l"; id = "change_window"; data = "20 "; },
  { key = "meta-j"; id = "command"; data = "nicklist scroll +10"; },
  { key = "meta-k"; id = "command"; data = "nicklist scroll -10"; },
  { key = "meta-'"; id = "change_window"; data = "11"; },
  { key = "meta-,"; id = "change_window"; data = "12"; },
  { key = "meta-."; id = "change_window"; data = "13"; },
  { key = "meta-g"; id = "change_window"; data = "17"; },
  { key = "meta-c"; id = "change_window"; data = "18"; },
  { key = "meta-;"; id = "change_window"; data = "11"; },
  { key = "meta-p"; id = "change_window"; data = "14"; },
  { key = "meta-y"; id = "change_window"; data = "15"; },
  { key = "meta-f"; id = "change_window"; data = "16"; },
  { key = "meta-r"; id = "change_window"; data = "19"; }
);
logs = { };
hilights = (
  { text = "bps"; nick = "yes"; word = "yes"; },
  { text = "samu"; nick = "yes"; word = "yes"; }
);
